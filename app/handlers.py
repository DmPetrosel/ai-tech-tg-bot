from aiogram import F, Router
from aiogram.types import (
    Message,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
import app.database.requests as rq
from app.keyboards import get_main_keyboard, confirm_keyboard
from aiogram.types import CallbackQuery

router = Router()


class RegistrationStates(StatesGroup):
    waiting_for_full_name = State()
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_ai_interest = State()
    waiting_for_phone = State()


async def show_main_menu(message: Message, page=1):
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:" if page == 1 else "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard(page),
    )


@router.message(CommandStart())
async def cmd_start(message: Message):
    user = await rq.get_user(message.from_user.id)
    if not user or not user.is_registered:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ–º–∞–Ω–¥—ã AI Tech. –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º—Å—è!",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]],
                resize_keyboard=True,
            ),
        )
    else:
        await show_main_menu(message, page=1)


@router.message(F.text == "–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
async def start_registration(message: Message, state: FSMContext):
    await state.set_state(RegistrationStates.waiting_for_full_name)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (–ø–æ–ª–Ω–æ–µ –∏–º—è):", reply_markup=ReplyKeyboardRemove()
    )


@router.message(RegistrationStates.waiting_for_full_name)
async def process_full_name(message: Message, state: FSMContext):
    if len(message.text) < 5:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤)")
        return

    await state.update_data(full_name=message.text)
    await state.set_state(RegistrationStates.waiting_for_gender)
    await message.answer(
        "–í–∞—à –ø–æ–ª:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")]],
            resize_keyboard=True,
        ),
    )


@router.message(RegistrationStates.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    valid_genders = ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]
    if message.text not in valid_genders:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")
        return

    await state.update_data(gender=message.text)
    await state.set_state(RegistrationStates.waiting_for_age)
    await message.answer(
        "–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–¥–æ 18"), KeyboardButton(text="18-25")],
                [KeyboardButton(text="25-30"), KeyboardButton(text="30-45")],
                [KeyboardButton(text="45+")],
            ],
            resize_keyboard=True,
        ),
    )


@router.message(RegistrationStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    valid_ages = ["–¥–æ 18", "18-25", "25-30", "30-45", "45+"]
    if message.text not in valid_ages:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏")
        return

    await state.update_data(age=message.text)
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [
                    KeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç",
                        callback_data="contact",
                        request_contact=True,
                    ),
                ]
            ]
        ),
    )
    await state.set_state(RegistrationStates.waiting_for_phone)


@router.message(RegistrationStates.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):

    if not message.contact and len(message.text) <= 3:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79991234567"
        )
        await state.set_state(RegistrationStates.waiting_for_phone)
        return
    if message.contact:
        await state.update_data(phone_number=message.contact.phone_number)
    else:
        await state.update_data(phone_number=message.text)

    await message.answer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç!")

    await state.set_state(RegistrationStates.waiting_for_ai_interest)
    await message.answer(
        "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –ª–∏ –≤—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")],
                [KeyboardButton(text="–í–æ–∑–º–æ–∂–Ω–æ")],
            ],
            resize_keyboard=True,
        ),
    )


# @router.callback_query(F.data == "contact")
# async def process_contact(call: CallbackQuery, state: FSMContext):
#     if call.message.contact:
#         await call.answer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç!", show_alert=True)
#         await state.update_data(phone_number=call.message.contact.phone_number)

#     await state.set_state(RegistrationStates.waiting_for_ai_interest)
#     await call.message.answer(
#         "–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –ª–∏ –≤—ã –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π?",
#         reply_markup=ReplyKeyboardMarkup(
#             keyboard=[
#                 [KeyboardButton(text="–î–∞"), KeyboardButton(text="–ù–µ—Ç")],
#                 [KeyboardButton(text="–í–æ–∑–º–æ–∂–Ω–æ")],
#             ],
#             resize_keyboard=True,
#         ),
#     )


@router.message(RegistrationStates.waiting_for_ai_interest)
async def process_ai_interest(message: Message, state: FSMContext):
    await state.update_data(ai_interest=message.text)
    user_data = await state.get_data()

    await message.answer(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n"
        f"–§–ò–û: {user_data['full_name']}\n"
        f"–ü–æ–ª: {user_data['gender']}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age']}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['phone_number']}\n"
        f"–ò–Ω—Ç–µ—Ä–µ—Å –∫ AI: {user_data['ai_interest']}",
        reply_markup=confirm_keyboard,
    )
    await state.set_state(None)


@router.message(F.text == "–î–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
async def confirm_data(message: Message, state: FSMContext):
    user_data = await state.get_data()
    await rq.create_or_update_user(
        tg_id=message.from_user.id,
        full_name=user_data["full_name"],
        gender=user_data["gender"],
        age=user_data["age"],
        phone_number=user_data["phone_number"],
        ai_interest=user_data["ai_interest"],
    )
    await state.clear()
    await show_main_menu(message, page=1)


@router.message(F.text == "–ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ")
async def restart_registration(message: Message, state: FSMContext):
    await state.clear()
    await start_registration(message, state)


@router.message(F.text == "–ù–∞—à –±–ª–æ–≥ ‚û°Ô∏è")
async def next_page(message: Message):
    await show_main_menu(message, page=2)


@router.message(F.text == "‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def prev_page(message: Message):
    await show_main_menu(message, page=1)


@router.message(F.text == "–û –Ω–∞—Å")
async def about_us(message: Message):
    await message.answer(
        "üåü <b>AI Tech - –≤–∞—à –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä—Ç–Ω–µ—Ä –≤ –º–∏—Ä–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞!</b> üåü\n\n"
        "üöÄ –ú—ã - –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ —Å –±–æ–ª–µ–µ —á–µ–º 5-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ AI-—Ä–µ—à–µ–Ω–∏–π.\n"
        "üí° –ù–∞—à–∞ –º–∏—Å—Å–∏—è - —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –ª—é–±–æ–≥–æ –º–∞—Å—à—Ç–∞–±–∞.\n\n"
        "üîπ <b>50+</b> —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤\n"
        "üîπ <b>25+</b> –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–æ–≤ –≤ –∫–æ–º–∞–Ω–¥–µ\n"
        "üîπ <b>100%</b> –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–∏–µ–Ω—Ç–∞\n\n"
        "–ú—ã —Å–æ–∑–¥–∞–µ–º –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ä—ã–≤–∞!",
        reply_markup=get_main_keyboard(page=1),
        parse_mode="HTML",
    )


@router.message(F.text == "–£—Å–ª—É–≥–∏")
async def services(message: Message):
    await message.answer(
        "üíº <b>–ù–∞—à–∏ –∫–ª—é—á–µ–≤—ã–µ —É—Å–ª—É–≥–∏:</b>\n\n"
        "ü§ñ <b>AI-—Ä–µ—à–µ–Ω–∏—è –ø–æ–¥ –∫–ª—é—á:</b> –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º\n"
        "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö:</b> –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π\n"
        "üõ† <b>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å AI:</b> –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á\n"
        "üîç <b>–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥:</b> –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ò–ò –≤ –≤–∞—à–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã\n"
        "‚öôÔ∏è <b>–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</b> –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
        "–ö–∞–∂–¥–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ–¥ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏!",
        reply_markup=get_main_keyboard(page=1),
        parse_mode="HTML",
    )


@router.message(F.text == "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ")
async def portfolio(message: Message):
    await message.answer(
        text="üìÇ <b>–ù–∞—à–∏ –∫–µ–π—Å—ã</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>.\n\n"
        "üîπ –°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞\n"
        "üîπ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–∏—Ç–µ–π–ª-—Å–µ—Ç–∏\n"
        "üîπ–î–µ–ª–∞–µ–º —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–Ω–∞–ª–æ–≥ –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏ –∏ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏\n"
        "üîπ–¶–∏—Ñ—Ä–æ–≤–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞\n"
        "üîπ–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è —Ä–∞–Ω–Ω–µ–≥–æ –≤—ã—è–≤–ª–µ–Ω–∏—è –æ–Ω–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π\n",
        reply_markup=get_main_keyboard(page=1),
        parse_mode="HTML",
    )

    # "üìÇ <b>–ù–∞—à–∏ –∫–µ–π—Å—ã</b>\n\n"
    # "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª–Ω–æ–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n"
    # "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –Ω–∞—à–∏—Ö —Ä–∞–±–æ—Ç —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã</b>.\n\n"
    # "üîπ –°–∏—Å—Ç–µ–º–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¥–ª—è –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞\n"
    # "üîπ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–∏—Ç–µ–π–ª-—Å–µ—Ç–∏\n"
    # "üîπ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å–µ–∫—Ç–æ—Ä–∞",


@router.message(F.text == "–ò–ò –≤ –º–µ–¥–∏—Ü–∏–Ω–µ")
async def ai_in_medicine(message: Message):
    await message.answer(
        "üè• <b>–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –º–µ–¥–∏—Ü–∏–Ω–µ</b>\n\n"
        "–ú—ã —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –¥–ª—è:\n"
        "üî∏ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º\n"
        "üî∏ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ—á–µ–Ω–∏—è –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π\n"
        "üî∏ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ —Ç–µ—Ä–∞–ø–∏–∏\n\n"
        "–ù–∞—à–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç:\n"
        "‚úÖ –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫\n"
        "‚úÖ –°–æ–∫—Ä–∞—Ç–∏—Ç—å –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–æ–≤\n"
        "‚úÖ –ü–æ–≤—ã—Å–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä –≤–Ω–µ–¥—Ä–µ–Ω–∏—è: —Ç–æ—á–Ω–æ—Å—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–Ω–µ–≤–º–æ–Ω–∏–∏ –ø–æ —Ä–µ–Ω—Ç–≥–µ–Ω-—Å–Ω–∏–º–∫–∞–º - 94%</i>",
        reply_markup=get_main_keyboard(page=1),
        parse_mode="HTML",
    )


@router.message(F.text == "FAQ")
async def faq(message: Message):
    await message.answer(
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ?", callback_data="faq_start"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞?", callback_data="faq_cost"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ?",
                        callback_data="faq_tech",
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–ï—Å—Ç—å –ª–∏ –≥–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è?", callback_data="faq_ready"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="–ö–∞–∫–æ–π —Å—Ä–æ–∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏?", callback_data="faq_time"
                    )
                ],
            ]
        ),
        parse_mode="HTML",
    )


@router.callback_query(F.data.startswith("faq_"))
async def faq_answer(callback: CallbackQuery):
    question = callback.data.split("_")[1]
    answers = {
        "start": "üõ† <b>–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ?</b>\n\n1. –û—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º –≤–∞–º —Å–ø–æ—Å–æ–±–æ–º: Telegram, WhatsApp, —Å–∞–π—Ç –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–º –ø–æ–∑–≤–æ–Ω–∏—Ç–µ\n2. –ú—ã –ø—Ä–æ–≤–µ–¥–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞—É–¥–∏—Ç\n3. –ü–æ–ª—É—á–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ\n\n–í–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–∏–º–∞–µ—Ç 1-2 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è.",
        "cost": "üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏</b>\n\n–¶–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n‚Ä¢ MVP: –æ—Ç 500 000 —Ä—É–±.\n‚Ä¢ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –æ—Ç 1 500 000 —Ä—É–±.\n‚Ä¢ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã: –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç",
        "tech": "üß† <b>–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</b>\n\n‚Ä¢ Python, TensorFlow, PyTorch\n‚Ä¢ Computer Vision (OpenCV)\n‚Ä¢ NLP (BERT, GPT)\n‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (Pandas, NumPy)\n‚Ä¢ –û–±–ª–∞—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã (AWS, Yandex Cloud)",
        "ready": "üì¶ <b>–ì–æ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è</b>\n\n‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n‚Ä¢ –ß–∞—Ç-–±–æ—Ç —Å NLP\n‚Ä¢ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ retail-–¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–æ–¥—É–ª—å",
        "time": "‚è± <b>–°—Ä–æ–∫–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏</b>\n\n‚Ä¢ –ü—Ä–æ—Ç–æ—Ç–∏–ø: 2-4 –Ω–µ–¥–µ–ª–∏\n‚Ä¢ MVP: 1-3 –º–µ—Å—è—Ü–∞\n‚Ä¢ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç: –æ—Ç 6 –º–µ—Å—è—Ü–µ–≤\n\n–¢–æ—á–Ω—ã–µ —Å—Ä–æ–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–¥–∞—á.",
    }
    await callback.message.answer(answers[question], parse_mode="HTML")
    await callback.answer()


@router.message(F.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: Message):
    await message.answer(
        "üìû <b>–ö–∞–∫ —Å –Ω–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è:</b>\n\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b> –ù–∞—à –≥–ª–∞–≤–Ω—ã–π –æ—Ñ–∏—Å —Å–µ–π—á–∞—Å –≤ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–µ\n"
        "üïí <b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã:</b> –ü–Ω-–ü—Ç 9:00-18:00\n\n"
        "<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7(985)555-17-79\n"
        "‚Ä¢ –¢–µ–ª–µ–≥—Ä–∞–º: @ai_tech_llc\n"
        "‚Ä¢ Email: aitech2025@mail.ru\n"
        "‚Ä¢ –°–∞–π—Ç: <a href='https://xn--80akkb9bt4c.xn--p1ai//'>—ç–π–∞–π—Ç–µ—Ö.—Ä—Ñ</a>\n\n"
        "<i>–ó–∞–∫–∞–∂–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–∞—à —Å–∞–π—Ç!</i>",
        reply_markup=get_main_keyboard(page=2),
        parse_mode="HTML",
        disable_web_page_preview=True,
    )
